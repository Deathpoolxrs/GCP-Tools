#!/usr/bin/env python3

import json
import requests
from googleapiclient.discovery import build
import google.oauth2.credentials

# ---------------------------------------
# Get user access token and credentials
# ---------------------------------------
ACCESS_TOKEN = input('🔐 Enter a USER access token: ').strip()
creds = google.oauth2.credentials.Credentials(ACCESS_TOKEN)

# ---------------------------------------
# List projects visible to this user
# ---------------------------------------
def list_projects(creds):
    crm = build('cloudresourcemanager', 'v1', credentials=creds)
    response = crm.projects().list().execute()
    return response.get('projects', [])

# ---------------------------------------
# List service accounts in a project
# ---------------------------------------
def list_service_accounts(creds, project_id):
    iam = build('iam', 'v1', credentials=creds)
    response = iam.projects().serviceAccounts().list(
        name=f'projects/{project_id}'
    ).execute()
    return response.get('accounts', [])

# ---------------------------------------
# Generate access token for service account
# ---------------------------------------
def generate_sa_token(creds, service_account_email):
    service = build('iamcredentials', 'v1', credentials=creds)

    body = {
        'scope': [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/iam'
        ]
    }

    res = service.projects().serviceAccounts().generateAccessToken(
        name=f'projects/-/serviceAccounts/{service_account_email}',
        body=body
    ).execute()

    return res['accessToken']

# ---------------------------------------
# Call resource manager with access token
# ---------------------------------------
def get_projects_visible_by_token(token):
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(
        'https://cloudresourcemanager.googleapis.com/v1/projects',
        headers=headers
    )
    if response.status_code == 200:
        return response.json().get('projects', [])
    return []

# ---------------------------------------
# Main logic
# ---------------------------------------

# Step 1: List projects
user_projects = list_projects(creds)
if not user_projects:
    raise Exception("❌ No projects visible to this user.")

print("\n📁 Projects visible to user:")
for i, p in enumerate(user_projects):
    print(f"{i}) {p['projectId']} ({p.get('name', '')})")

# Step 2: Pick a project
index = int(input("\n📌 Select a project by index: "))
selected_project = user_projects[index]
project_id = selected_project['projectId']

print(f"\n🔍 Scanning service accounts in project: {project_id}...")

# Step 3: List service accounts
svc_accounts = list_service_accounts(creds, project_id)
if not svc_accounts:
    raise Exception("❌ No service accounts found in selected project.")

# Step 4: Generate tokens and check project visibility
access_results = []
all_project_sets = []

for acc in svc_accounts:
    email = acc['email']
    try:
        sa_token = generate_sa_token(creds, email)
        visible_projects = get_projects_visible_by_token(sa_token)
        project_ids = {p['projectId'] for p in visible_projects}

        access_results.append({
            'email': email,
            'access_token': sa_token,
            'project_count': len(project_ids),
            'projects': visible_projects,
            'project_ids': project_ids
        })

        all_project_sets.append(project_ids)

        print(f"✅ {email} can access {len(project_ids)} project(s).")
    except Exception as e:
        print(f"⚠️  Failed for {email}: {e}")

# Step 5: Print all results
print("\n📊 Service Account Access Summary:\n")
for result in access_results:
    print(f"👤 Service Account: {result['email']}")
    print(f"🔐 Access Token: {result['access_token']}")
    print(f"📁 Accessible Projects ({result['project_count']}):")
    for proj in result['projects']:
        print(f"   - {proj['projectId']} ({proj.get('name', '')})")
    print("-" * 50)

# Step 6: Identify top service account
top_sa = max(access_results, key=lambda x: x['project_count'])
print("\n🏆 Top Service Account (Most Project Access):\n")
print(f"👤 Email: {top_sa['email']}")
print(f"🔐 Access Token: {top_sa['access_token']}")
print(f"📁 Projects Accessible ({top_sa['project_count']}):")
for proj in top_sa['projects']:
    print(f"   - {proj['projectId']} ({proj.get('name', '')})")

# Step 7: Common, Unique, and Union Projects
project_union = set.union(*[r['project_ids'] for r in access_results])
project_intersection = set.intersection(*[r['project_ids'] for r in access_results]) if access_results else set()

print("\n🔁 Common Projects (accessible by all service accounts):")
for pid in sorted(project_intersection):
    print(f"   - {pid}")

print("\n🧮 Union of All Projects (total):")
for pid in sorted(project_union):
    print(f"   - {pid}")

print("\n🔎 Unique Projects Per Service Account:")
for r in access_results:
    unique = r['project_ids'] - set.union(*[x['project_ids'] for x in access_results if x != r])
    if unique:
        print(f"\n👤 {r['email']} has {len(unique)} unique project(s):")
        for pid in sorted(unique):
            print(f"   - {pid}")
